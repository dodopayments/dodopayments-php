<?php

// This file was generated by liblab | https://liblab.com/

namespace Dodopayments\Models;

use Symfony\Component\Serializer\Annotation\SerializedName;

class Price1
{
    #[SerializedName('currency')]
    public Currency $currency;

    /**
     * Discount applied to the price, represented as a percentage (0 to 100).
     */
    #[SerializedName('discount')]
    public float $discount;

    /**
	 * Indicates whether the customer can pay any amount they choose.
If set to `true`, the [`price`](Self::price) field is the minimum amount.
	 */
    #[SerializedName('pay_what_you_want')]
    public ?bool $payWhatYouWant;

    /**
	 * The payment amount, in the smallest denomination of the currency (e.g., cents for USD).
For example, to charge $1.00, pass `100`.

If [`pay_what_you_want`](Self::pay_what_you_want) is set to `true`, this field represents
the **minimum** amount the customer must pay.
	 */
    #[SerializedName('price')]
    public int $price;

    /**
	 * Indicates if purchasing power parity adjustments are applied to the price.
Purchasing power parity feature is not available as of now.
	 */
    #[SerializedName('purchasing_power_parity')]
    public bool $purchasingPowerParity;

    /**
	 * A suggested price for the user to pay. This value is only considered if
[`pay_what_you_want`](Self::pay_what_you_want) is `true`. Otherwise, it is ignored.
	 */
    #[SerializedName('suggested_price')]
    public ?int $suggestedPrice;

    /**
     * Indicates if the price is tax inclusive.
     */
    #[SerializedName('tax_inclusive')]
    public ?bool $taxInclusive;

    #[SerializedName('type')]
    public Price1Type $type;

    public function __construct(
        Currency $currency,
        float $discount,
        ?bool $payWhatYouWant = null,
        int $price,
        bool $purchasingPowerParity,
        ?int $suggestedPrice = null,
        ?bool $taxInclusive = null,
        Price1Type $type
    ) {
        $this->currency = $currency;
        $this->discount = $discount;
        $this->payWhatYouWant = $payWhatYouWant;
        $this->price = $price;
        $this->purchasingPowerParity = $purchasingPowerParity;
        $this->suggestedPrice = $suggestedPrice;
        $this->taxInclusive = $taxInclusive;
        $this->type = $type;
    }
}
