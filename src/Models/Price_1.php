<?php

// This file was generated by liblab | https://liblab.com/

namespace Dodopayments\Models;

use Symfony\Component\Serializer\Annotation\SerializedName;

class Price1
{
    #[SerializedName('currency')]
    public Currency $currency;

    /**
     * Discount applied to the price, represented as a percentage (0 to 100).
     */
    #[SerializedName('discount')]
    public float $discount;

    /**
	 * The payment amount. Represented in the lowest denomination of the currency (e.g., cents for USD).
For example, to charge $1.00, pass `100`.
	 */
    #[SerializedName('price')]
    public int $price;

    /**
	 * Indicates if purchasing power parity adjustments are applied to the price.
Purchasing power parity feature is not available as of now
	 */
    #[SerializedName('purchasing_power_parity')]
    public bool $purchasingPowerParity;

    /**
     * Indicates if the price is tax inclusive
     */
    #[SerializedName('tax_inclusive')]
    public ?bool $taxInclusive;

    #[SerializedName('type')]
    public Price1Type $type;

    public function __construct(
        Currency $currency,
        float $discount,
        int $price,
        bool $purchasingPowerParity,
        ?bool $taxInclusive = null,
        Price1Type $type
    ) {
        $this->currency = $currency;
        $this->discount = $discount;
        $this->price = $price;
        $this->purchasingPowerParity = $purchasingPowerParity;
        $this->taxInclusive = $taxInclusive;
        $this->type = $type;
    }
}
