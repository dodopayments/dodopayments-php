<?php

// This file was generated by liblab | https://liblab.com/

namespace Dodopayments\Models;

use Symfony\Component\Serializer\Annotation\SerializedName;

class GetProductsListResponseItem
{
    /**
     * Unique identifier for the business to which the product belongs.
     */
    #[SerializedName('business_id')]
    public string $businessId;

    /**
     * Timestamp when the product was created.
     */
    #[SerializedName('created_at')]
    public string $createdAt;

    #[SerializedName('currency')]
    public ?Currency $currency;

    /**
     * Description of the product, optional.
     */
    #[SerializedName('description')]
    public ?string $description;

    /**
     * URL of the product image, optional.
     */
    #[SerializedName('image')]
    public ?string $image;

    /**
     * Indicates if the product is recurring (e.g., subscriptions).
     */
    #[SerializedName('is_recurring')]
    public bool $isRecurring;

    /**
     * Name of the product, optional.
     */
    #[SerializedName('name')]
    public ?string $name;

    /**
	 * Price of the product, optional.

The price is represented in the lowest denomination of the currency.
For example:
- In USD, a price of `$12.34` would be represented as `1234` (cents).
- In JPY, a price of `¥1500` would be represented as `1500` (yen).
- In INR, a price of `₹1234.56` would be represented as `123456` (paise).

This ensures precision and avoids floating-point rounding errors.
	 */
    #[SerializedName('price')]
    public ?int $price;

    #[SerializedName('price_detail')]
    public ?Price $priceDetail;

    /**
     * Unique identifier for the product.
     */
    #[SerializedName('product_id')]
    public string $productId;

    /**
     * Represents the different categories of taxation applicable to various products and services.
     */
    #[SerializedName('tax_category')]
    public TaxCategory $taxCategory;

    /**
     * Indicates if the price is tax inclusive
     */
    #[SerializedName('tax_inclusive')]
    public ?bool $taxInclusive;

    /**
     * Timestamp when the product was last updated.
     */
    #[SerializedName('updated_at')]
    public string $updatedAt;

    public function __construct(
        string $businessId,
        string $createdAt,
        ?Currency $currency = null,
        ?string $description = null,
        ?string $image = null,
        bool $isRecurring,
        ?string $name = null,
        ?int $price = null,
        ?Price $priceDetail = null,
        string $productId,
        TaxCategory $taxCategory,
        ?bool $taxInclusive = null,
        string $updatedAt
    ) {
        $this->businessId = $businessId;
        $this->createdAt = $createdAt;
        $this->currency = $currency;
        $this->description = $description;
        $this->image = $image;
        $this->isRecurring = $isRecurring;
        $this->name = $name;
        $this->price = $price;
        $this->priceDetail = $priceDetail;
        $this->productId = $productId;
        $this->taxCategory = $taxCategory;
        $this->taxInclusive = $taxInclusive;
        $this->updatedAt = $updatedAt;
    }
}
