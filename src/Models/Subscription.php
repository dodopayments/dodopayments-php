<?php

// This file was generated by liblab | https://liblab.com/

namespace Dodopayments\Models;

use Symfony\Component\Serializer\Annotation\SerializedName;

class Subscription
{
    #[SerializedName('billing')]
    public BillingAddress $billing;

    /**
     * Cancelled timestamp if the subscription is cancelled
     */
    #[SerializedName('cancelled_at')]
    public ?string $cancelledAt;

    /**
     * Timestamp when the subscription was created
     */
    #[SerializedName('created_at')]
    public string $createdAt;

    #[SerializedName('currency')]
    public Currency $currency;

    #[SerializedName('customer')]
    public CustomerLimitedDetailsResponse $customer;

    /**
     * The discount id if discount is applied
     */
    #[SerializedName('discount_id')]
    public ?string $discountId;

    #[SerializedName('metadata')]
    public array $metadata;

    /**
     * Timestamp of the next scheduled billing
     */
    #[SerializedName('next_billing_date')]
    public string $nextBillingDate;

    /**
     * Number of payment frequency intervals
     */
    #[SerializedName('payment_frequency_count')]
    public int $paymentFrequencyCount;

    #[SerializedName('payment_frequency_interval')]
    public TimeInterval $paymentFrequencyInterval;

    /**
     * Identifier of the product associated with this subscription
     */
    #[SerializedName('product_id')]
    public string $productId;

    /**
     * Number of units/items included in the subscription
     */
    #[SerializedName('quantity')]
    public int $quantity;

    /**
     * Amount charged before tax for each recurring payment in smallest currency unit (e.g. cents)
     */
    #[SerializedName('recurring_pre_tax_amount')]
    public int $recurringPreTaxAmount;

    #[SerializedName('status')]
    public SubscriptionStatus $status;

    /**
     * Unique identifier for the subscription
     */
    #[SerializedName('subscription_id')]
    public string $subscriptionId;

    /**
     * Number of subscription period intervals
     */
    #[SerializedName('subscription_period_count')]
    public int $subscriptionPeriodCount;

    #[SerializedName('subscription_period_interval')]
    public TimeInterval $subscriptionPeriodInterval;

    /**
     * Indicates if the recurring_pre_tax_amount is tax inclusive
     */
    #[SerializedName('tax_inclusive')]
    public bool $taxInclusive;

    /**
     * Number of days in the trial period (0 if no trial)
     */
    #[SerializedName('trial_period_days')]
    public int $trialPeriodDays;

    #[SerializedName('payload_type')]
    public SubscriptionPayloadType $payloadType;

    public function __construct(
        BillingAddress $billing,
        ?string $cancelledAt = null,
        string $createdAt,
        Currency $currency,
        CustomerLimitedDetailsResponse $customer,
        ?string $discountId = null,
        array $metadata,
        string $nextBillingDate,
        int $paymentFrequencyCount,
        TimeInterval $paymentFrequencyInterval,
        string $productId,
        int $quantity,
        int $recurringPreTaxAmount,
        SubscriptionStatus $status,
        string $subscriptionId,
        int $subscriptionPeriodCount,
        TimeInterval $subscriptionPeriodInterval,
        bool $taxInclusive,
        int $trialPeriodDays,
        SubscriptionPayloadType $payloadType
    ) {
        $this->billing = $billing;
        $this->cancelledAt = $cancelledAt;
        $this->createdAt = $createdAt;
        $this->currency = $currency;
        $this->customer = $customer;
        $this->discountId = $discountId;
        $this->metadata = $metadata;
        $this->nextBillingDate = $nextBillingDate;
        $this->paymentFrequencyCount = $paymentFrequencyCount;
        $this->paymentFrequencyInterval = $paymentFrequencyInterval;
        $this->productId = $productId;
        $this->quantity = $quantity;
        $this->recurringPreTaxAmount = $recurringPreTaxAmount;
        $this->status = $status;
        $this->subscriptionId = $subscriptionId;
        $this->subscriptionPeriodCount = $subscriptionPeriodCount;
        $this->subscriptionPeriodInterval = $subscriptionPeriodInterval;
        $this->taxInclusive = $taxInclusive;
        $this->trialPeriodDays = $trialPeriodDays;
        $this->payloadType = $payloadType;
    }
}
