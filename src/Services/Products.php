<?php

// This file was generated by liblab | https://liblab.com/

namespace Dodopayments\Services;

use Dodopayments\Utils\Serializer;
use Dodopayments\Models;

class Products extends BaseService
{
    public function listProductsHandler(
        int $pageSize = null,
        int $pageNumber = null,
        bool $archived = null,
        bool $recurring = null,
        string $brandId = null
    ): Models\GetProductsListResponse {
        $data = $this->sendRequest('get', '/products', [
            'query' => [
                'page_size' => $pageSize,
                'page_number' => $pageNumber,
                'archived' => $archived,
                'recurring' => $recurring,
                'brand_id' => $brandId,
            ],
        ]);

        return Serializer::deserialize($data, Models\GetProductsListResponse::class);
    }

    public function createProduct(Models\CreateProductRequest $input): Models\GetProductResponse
    {
        $data = $this->sendRequest('post', '/products', ['json' => Serializer::serialize($input)]);

        return Serializer::deserialize($data, Models\GetProductResponse::class);
    }

    public function getProductHandler(string $id): Models\GetProductResponse
    {
        $data = $this->sendRequest('get', "/products/{$id}", []);

        return Serializer::deserialize($data, Models\GetProductResponse::class);
    }

    public function patchProduct(Models\PatchProductRequest $input, string $id): mixed
    {
        $data = $this->sendRequest('patch', "/products/{$id}", ['json' => Serializer::serialize($input)]);

        return json_decode($data, true);
    }

    public function deleteProduct(string $id): mixed
    {
        $data = $this->sendRequest('delete', "/products/{$id}", []);

        return json_decode($data, true);
    }

    public function uploadProductFile(Models\UploadProductFile $input, string $id): Models\UploadProductFileResponse
    {
        $data = $this->sendRequest('put', "/products/{$id}/files", ['json' => Serializer::serialize($input)]);

        return Serializer::deserialize($data, Models\UploadProductFileResponse::class);
    }

    public function updateProductImage(string $id, bool $forceUpdate = null): Models\UpdateProductImageResponse
    {
        $data = $this->sendRequest('put', "/products/{$id}/images", [
            'query' => [
                'force_update' => $forceUpdate,
            ],
        ]);

        return Serializer::deserialize($data, Models\UpdateProductImageResponse::class);
    }

    public function undeleteProduct(string $id): mixed
    {
        $data = $this->sendRequest('post', "/products/{$id}/unarchive", []);

        return json_decode($data, true);
    }
}
